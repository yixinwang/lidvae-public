
R version 3.5.3 (2019-03-11) -- "Great Truth"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> # install.packages("rstan", lib="/rigel/stats/users/yw2539/rpackages/")
> # install.packages("ramify", lib="/rigel/stats/users/yw2539/rpackages/")
> # install.packages("Rcpp", lib="/rigel/stats/users/yw2539/rpackages/")
> 
> .libPaths("/rigel/stats/users/yw2539/rpackages/")
> 
> options(bitmapType='cairo')
> 
> library(rstan)
Loading required package: StanHeaders
Loading required package: ggplot2
rstan (Version 2.19.3, GitRev: 2e1f913d3ca3)
For execution on a local, multicore CPU with excess RAM we recommend calling
options(mc.cores = parallel::detectCores()).
To avoid recompilation of unchanged Stan programs, we recommend calling
rstan_options(auto_write = TRUE)
> library(matrixStats)
> library(ramify)

Attaching package: ‘ramify’

The following object is masked from ‘package:graphics’:

    clip

> 
> rstan_options(auto_write = TRUE)
> 
> dir.create(file.path('/rigel/stats/users/yw2539/dgm_yw2539/src/neurips2020/gmm_collapse', 'out'))
Warning message:
In dir.create(file.path("/rigel/stats/users/yw2539/dgm_yw2539/src/neurips2020/gmm_collapse",  :
  '/rigel/stats/users/yw2539/dgm_yw2539/src/neurips2020/gmm_collapse/out' already exists
> 
> set.seed(689934)
> 
> source("utils.R")
> 
> 
> # one gaussian clusters
> 
> N <- 10000
> mu <- c(-10, 10);
> sigma <- c(1, 1);
> lambda <- 0.15
> z <- rbinom(N, 1, lambda) + 1;
> y <- rnorm(N, mu[z], sigma[z]);
> 
> theta <- 0.25
> 
> theta_prior <- 5
> 
> 
> stan_rdump(c("N", "y","mu", "sigma", "theta_prior"), file="out/nonoverlap_gaussian.data.R")
> 
> # plot likelihood
> nonoverlap_gaussian <- read_rdump("out/nonoverlap_gaussian.data.R")
> 
> nonoverlap_gaussian_max_marginal_ll = optim(rnorm(4), 
+         fn = gmm_marginal_ll, 
+         method = "BFGS", 
+         control = list(fnscale = -1),
+         input_data = nonoverlap_gaussian,
+         beta_a=0.5, beta_b=0.5)
> 
> alphas = linspace(0, 1, n = 1000)
> nonoverlap_gaussian_ll_alphas_est = sapply(alphas, gmm_ll, params=nonoverlap_gaussian_max_marginal_ll$par, input_data=nonoverlap_gaussian)
> 
> nonoverlap_gaussian_ll_alphas_true = sapply(alphas, gmm_ll, params=c(-10,0,10,0), input_data=nonoverlap_gaussian)
> 
> write.csv(nonoverlap_gaussian_ll_alphas_est, "out/nonoverlap_gaussian_ll_alphas_est.csv")
> write.csv(nonoverlap_gaussian_ll_alphas_true, "out/nonoverlap_gaussian_ll_alphas_true.csv")
> write.csv(nonoverlap_gaussian_max_marginal_ll$par, "out/nonoverlap_gaussian_optim_params.csv")
> 
> 
> 
> 
> 
> stan_file = 'gauss_mix.stan'
> # fit by hmc
> degenerate_fit_hmc <- stan(file=stan_file, data=nonoverlap_gaussian,
+                        chains=4, seed=483892929, refresh=2000)

SAMPLING FOR MODEL 'gauss_mix' NOW (CHAIN 1).
Chain 1: 
Chain 1: Gradient evaluation took 0 seconds
Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0 seconds.
Chain 1: Adjust your expectations accordingly!
Chain 1: 
Chain 1: 
Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup)
Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling)
Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling)
Chain 1: 
Chain 1:  Elapsed Time: 43.86 seconds (Warm-up)
Chain 1:                18.04 seconds (Sampling)
Chain 1:                61.9 seconds (Total)
Chain 1: 

SAMPLING FOR MODEL 'gauss_mix' NOW (CHAIN 2).
Chain 2: 
Chain 2: Gradient evaluation took 0 seconds
Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 0 seconds.
Chain 2: Adjust your expectations accordingly!
Chain 2: 
Chain 2: 
Chain 2: Iteration:    1 / 2000 [  0%]  (Warmup)
Chain 2: Iteration: 1001 / 2000 [ 50%]  (Sampling)
Chain 2: Iteration: 2000 / 2000 [100%]  (Sampling)
Chain 2: 
Chain 2:  Elapsed Time: 53.54 seconds (Warm-up)
Chain 2:                18.49 seconds (Sampling)
Chain 2:                72.03 seconds (Total)
Chain 2: 

SAMPLING FOR MODEL 'gauss_mix' NOW (CHAIN 3).
Chain 3: 
Chain 3: Gradient evaluation took 0.01 seconds
Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 100 seconds.
Chain 3: Adjust your expectations accordingly!
Chain 3: 
Chain 3: 
Chain 3: Iteration:    1 / 2000 [  0%]  (Warmup)
Chain 3: Iteration: 1001 / 2000 [ 50%]  (Sampling)
Chain 3: Iteration: 2000 / 2000 [100%]  (Sampling)
Chain 3: 
Chain 3:  Elapsed Time: 19.83 seconds (Warm-up)
Chain 3:                31.14 seconds (Sampling)
Chain 3:                50.97 seconds (Total)
Chain 3: 

SAMPLING FOR MODEL 'gauss_mix' NOW (CHAIN 4).
Chain 4: 
Chain 4: Gradient evaluation took 0.01 seconds
Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 100 seconds.
Chain 4: Adjust your expectations accordingly!
Chain 4: 
Chain 4: 
Chain 4: Iteration:    1 / 2000 [  0%]  (Warmup)
Chain 4: Iteration: 1001 / 2000 [ 50%]  (Sampling)
Chain 4: Iteration: 2000 / 2000 [100%]  (Sampling)
Chain 4: 
Chain 4:  Elapsed Time: 76.81 seconds (Warm-up)
Chain 4:                18.09 seconds (Sampling)
Chain 4:                94.9 seconds (Total)
Chain 4: 
Warning messages:
1: The largest R-hat is 1.73, indicating chains have not mixed.
Running the chains for more iterations may help. See
http://mc-stan.org/misc/warnings.html#r-hat 
2: Bulk Effective Samples Size (ESS) is too low, indicating posterior means and medians may be unreliable.
Running the chains for more iterations may help. See
http://mc-stan.org/misc/warnings.html#bulk-ess 
3: Tail Effective Samples Size (ESS) is too low, indicating posterior variances and tail quantiles may be unreliable.
Running the chains for more iterations may help. See
http://mc-stan.org/misc/warnings.html#tail-ess 
> 
> # fit by vb
> gauss_mix_stan = stan_model(file=stan_file, verbose=TRUE)

TRANSLATING MODEL 'gauss_mix' FROM Stan CODE TO C++ CODE NOW.
successful in parsing the Stan model 'gauss_mix'.
> degenerate_fit_vbmf <- vb(gauss_mix_stan, data=nonoverlap_gaussian, 
+ 	tol_rel_obj = 1e-3, algorithm ="meanfield")
Chain 1: ------------------------------------------------------------
Chain 1: EXPERIMENTAL ALGORITHM:
Chain 1:   This procedure has not been thoroughly tested and may be unstable
Chain 1:   or buggy. The interface is subject to change.
Chain 1: ------------------------------------------------------------
Chain 1: 
Chain 1: 
Chain 1: 
Chain 1: Gradient evaluation took 0.01 seconds
Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 100 seconds.
Chain 1: Adjust your expectations accordingly!
Chain 1: 
Chain 1: 
Chain 1: Begin eta adaptation.
Chain 1: Iteration:   1 / 250 [  0%]  (Adaptation)
Chain 1: Iteration:  50 / 250 [ 20%]  (Adaptation)
Chain 1: Iteration: 100 / 250 [ 40%]  (Adaptation)
Chain 1: Iteration: 150 / 250 [ 60%]  (Adaptation)
Chain 1: Iteration: 200 / 250 [ 80%]  (Adaptation)
Chain 1: Success! Found best value [eta = 1] earlier than expected.
Chain 1: 
Chain 1: Begin stochastic gradient ascent.
Chain 1:   iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes 
Chain 1:    100       -38218.641             1.000            1.000
Chain 1:    200       -33984.937             0.562            1.000
Chain 1:    300       -33897.149             0.376            0.125
Chain 1:    400       -33864.006             0.282            0.125
Chain 1:    500       -25366.662             0.293            0.125
Chain 1:    600       -19962.438             0.289            0.271
Chain 1:    700       -18506.666             0.259            0.125
Chain 1:    800       -18470.325             0.227            0.125
Chain 1:    900       -18464.337             0.202            0.079
Chain 1:   1000       -18465.704             0.181            0.079
Chain 1:   1100       -18463.827             0.081            0.003
Chain 1:   1200       -18465.995             0.069            0.002
Chain 1:   1300       -18469.276             0.069            0.001   MEDIAN ELBO CONVERGED
Chain 1: 
Chain 1: Drawing a sample of size 1000 from the approximate posterior... 
Chain 1: COMPLETED.
Warning: Pareto k diagnostic value is 1.2. Resampling is disabled. Decreasing tol_rel_obj may help if variational algorithm has terminated prematurely. Otherwise consider using sampling instead.
> 
> degenerate_fit_vbfr <- vb(gauss_mix_stan, data=nonoverlap_gaussian, 
+ 	tol_rel_obj = 1e-3, algorithm ="fullrank")
Chain 1: ------------------------------------------------------------
Chain 1: EXPERIMENTAL ALGORITHM:
Chain 1:   This procedure has not been thoroughly tested and may be unstable
Chain 1:   or buggy. The interface is subject to change.
Chain 1: ------------------------------------------------------------
Chain 1: 
Chain 1: 
Chain 1: 
Chain 1: Gradient evaluation took 0 seconds
Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0 seconds.
Chain 1: Adjust your expectations accordingly!
Chain 1: 
Chain 1: 
Chain 1: Begin eta adaptation.
Chain 1: Iteration:   1 / 250 [  0%]  (Adaptation)
Chain 1: Iteration:  50 / 250 [ 20%]  (Adaptation)
Chain 1: Iteration: 100 / 250 [ 40%]  (Adaptation)
Chain 1: Iteration: 150 / 250 [ 60%]  (Adaptation)
Chain 1: Iteration: 200 / 250 [ 80%]  (Adaptation)
Chain 1: Iteration: 250 / 250 [100%]  (Adaptation)
Chain 1: Success! Found best value [eta = 0.1].
Chain 1: 
Chain 1: Begin stochastic gradient ascent.
Chain 1:   iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes 
Chain 1:    100       -37430.910             1.000            1.000
Chain 1:    200       -36046.756             0.519            1.000
Chain 1:    300       -35369.385             0.353            0.038
Chain 1:    400       -35007.236             0.267            0.038
Chain 1:    500       -34822.502             0.215            0.019
Chain 1:    600       -34489.096             0.180            0.019
Chain 1:    700       -34359.855             0.155            0.010
Chain 1:    800       -34154.464             0.137            0.010
Chain 1:    900       -33894.776             0.122            0.010
Chain 1:   1000       -33489.670             0.111            0.010
Chain 1:   1100       -32522.450             0.014            0.010
Chain 1:   1200       -32286.012             0.011            0.010
Chain 1:   1300       -31904.116             0.010            0.010
Chain 1:   1400       -30428.132             0.014            0.010
Chain 1:   1500       -29868.992             0.016            0.012
Chain 1:   1600       -30055.930             0.015            0.012
Chain 1:   1700       -27979.948             0.022            0.012
Chain 1:   1800       -28002.039             0.022            0.012
Chain 1:   1900       -27102.509             0.024            0.019
Chain 1:   2000       -26692.079             0.025            0.019
Chain 1:   2100       -26438.604             0.023            0.015
Chain 1:   2200       -25996.311             0.024            0.017
Chain 1:   2300       -26510.074             0.024            0.019
Chain 1:   2400       -25691.996             0.023            0.019
Chain 1:   2500       -24384.371             0.026            0.019
Chain 1:   2600       -24693.009             0.027            0.019
Chain 1:   2700       -24556.632             0.020            0.017
Chain 1:   2800       -23800.420             0.023            0.019
Chain 1:   2900       -22782.119             0.024            0.019
Chain 1:   3000       -21918.643             0.027            0.032
Chain 1:   3100       -21794.725             0.026            0.032
Chain 1:   3200       -21468.904             0.026            0.032
Chain 1:   3300       -21168.451             0.025            0.032
Chain 1:   3400       -20823.982             0.024            0.017
Chain 1:   3500       -20617.192             0.020            0.015
Chain 1:   3600       -20635.926             0.018            0.015
Chain 1:   3700       -20697.333             0.018            0.015
Chain 1:   3800       -20694.631             0.015            0.014
Chain 1:   3900       -20668.558             0.011            0.010
Chain 1:   4000       -20972.952             0.008            0.010
Chain 1:   4100       -20722.615             0.009            0.012
Chain 1:   4200       -20712.616             0.007            0.010
Chain 1:   4300       -21367.099             0.009            0.010
Chain 1:   4400       -21153.897             0.008            0.010
Chain 1:   4500       -20632.663             0.010            0.010
Chain 1:   4600       -20810.815             0.011            0.010
Chain 1:   4700       -20859.317             0.011            0.010
Chain 1:   4800       -21350.088             0.013            0.012
Chain 1:   4900       -23073.185             0.020            0.015
Chain 1:   5000       -20499.926             0.031            0.023
Chain 1:   5100       -20406.632             0.031            0.023
Chain 1:   5200       -20422.555             0.031            0.023
Chain 1:   5300       -20420.654             0.027            0.010
Chain 1:   5400       -20662.028             0.028            0.012
Chain 1:   5500       -20497.491             0.026            0.009
Chain 1:   5600       -20338.889             0.026            0.008
Chain 1:   5700       -20340.275             0.026            0.008
Chain 1:   5800       -20335.268             0.023            0.008
Chain 1:   5900       -20938.231             0.019            0.008
Chain 1:   6000       -20743.637             0.007            0.008
Chain 1:   6100       -20434.948             0.008            0.008
Chain 1:   6200       -20430.117             0.008            0.008
Chain 1:   6300       -20255.485             0.009            0.009
Chain 1:   6400       -20137.705             0.008            0.008
Chain 1:   6500       -20299.317             0.008            0.008
Chain 1:   6600       -20335.914             0.008            0.008
Chain 1:   6700       -20317.056             0.008            0.008
Chain 1:   6800       -20164.824             0.009            0.008
Chain 1:   6900       -20199.647             0.006            0.008
Chain 1:   7000       -20290.811             0.005            0.006
Chain 1:   7100       -20266.629             0.004            0.004
Chain 1:   7200       -20046.140             0.005            0.006
Chain 1:   7300       -20124.828             0.005            0.004
Chain 1:   7400       -20322.434             0.005            0.004
Chain 1:   7500       -20350.485             0.004            0.004
Chain 1:   7600       -20117.765             0.005            0.004
Chain 1:   7700       -20266.442             0.006            0.007
Chain 1:   7800       -20208.616             0.006            0.004
Chain 1:   7900       -19934.352             0.007            0.007
Chain 1:   8000       -20077.252             0.007            0.007
Chain 1:   8100       -20100.999             0.007            0.007
Chain 1:   8200       -20145.242             0.006            0.007
Chain 1:   8300       -20515.197             0.008            0.007
Chain 1:   8400       -20267.153             0.008            0.007
Chain 1:   8500       -20376.152             0.008            0.007
Chain 1:   8600       -22378.985             0.016            0.007
Chain 1:   8700       -19977.320             0.027            0.012
Chain 1:   8800       -19975.783             0.027            0.012
Chain 1:   8900       -19907.889             0.026            0.007
Chain 1:   9000       -19837.937             0.026            0.005
Chain 1:   9100       -20133.120             0.027            0.012
Chain 1:   9200       -20262.612             0.027            0.012
Chain 1:   9300       -20130.730             0.026            0.007
Chain 1:   9400       -20528.036             0.027            0.007
Chain 1:   9500       -20024.078             0.029            0.015
Chain 1:   9600       -19875.532             0.021            0.007
Chain 1:   9700       -19808.809             0.009            0.007
Chain 1:   9800       -20126.017             0.011            0.007
Chain 1:   9900       -19834.793             0.012            0.015
Chain 1:   10000       -20226.337             0.013            0.015
Chain 1: Informational Message: The maximum number of iterations is reached! The algorithm may not have converged.
Chain 1: This variational approximation is not guaranteed to be meaningful.
Chain 1: 
Chain 1: Drawing a sample of size 1000 from the approximate posterior... 
Chain 1: COMPLETED.
Warning: Pareto k diagnostic value is 30.6. Resampling is disabled. Decreasing tol_rel_obj may help if variational algorithm has terminated prematurely. Otherwise consider using sampling instead.
> 
> # curate all fits
> methods = c("hmc", "vbmf", "vbfr")
> fits = c(degenerate_fit_hmc, degenerate_fit_vbmf, degenerate_fit_vbfr)
> 
> 
> 
> 
> # plot the fits
> c_light_trans <- c("#DCBCBCBF")
> c_light_highlight_trans <- c("#C79999BF")
> c_mid_trans <- c("#B97C7CBF")
> c_mid_highlight_trans <- c("#A25050BF")
> c_dark_trans <- c("#8F2727BF")
> c_dark_highlight_trans <- c("#7C0000BF")
> 
> 
> for (i in 1:length(fits)){
+ 	method = methods[i]
+ 	degenerate_fit = fits[i][[1]]
+ 
+ 	print(method)
+ 	print(degenerate_fit)
+ 
+ 	if (method=="hmc"){
+ 		params <- as.data.frame(extract(degenerate_fit, permuted=FALSE)[,1,])
+ 		theta_sample = params$theta
+ 	}
+ 	else {
+ 		theta_sample = extract(degenerate_fit)$theta
+ 	}
+ 
+ 	write.csv(theta_sample, paste(c("out/nonoverlap_gaussian_theta_sample_", method, ".csv"), collapse = ''))
+ }
[1] "hmc"
Inference for Stan model: gauss_mix.
4 chains, each with iter=2000; warmup=1000; thin=1; 
post-warmup draws per chain=1000, total post-warmup draws=4000.

              mean se_mean    sd      2.5%       25%       50%       75%
mu[1]         0.01    7.07 10.01    -10.01     -9.99     -0.01     10.02
mu[2]         0.01    7.07 10.01    -10.01     -9.99     -0.01     10.02
sigma[1]      1.01    0.00  0.01      0.98      1.00      1.01      1.01
sigma[2]      1.01    0.00  0.01      0.98      1.00      1.01      1.01
theta         0.50    0.25  0.35      0.14      0.15      0.50      0.85
lp__     -18448.03    0.03  1.52 -18451.79 -18448.83 -18447.72 -18446.92
             97.5% n_eff   Rhat
mu[1]        10.06     2 544.94
mu[2]        10.06     2 534.32
sigma[1]      1.04  4086   1.00
sigma[2]      1.04  4129   1.00
theta         0.86     2 108.07
lp__     -18445.99  2235   1.00

Samples were drawn using NUTS(diag_e) at Thu Jun  4 09:31:15 2020.
For each parameter, n_eff is a crude measure of effective sample size,
and Rhat is the potential scale reduction factor on split chains (at 
convergence, Rhat=1).
[1] "vbmf"
Inference for Stan model: gauss_mix.
1 chains, each with iter=1000; warmup=0; thin=1; 
post-warmup draws per chain=1000, total post-warmup draws=1000.

          mean se_mean   sd  2.5%   25%   50%   75% 97.5% n_eff khat
mu[1]    -9.97     NaN 0.01 -9.99 -9.97 -9.97 -9.96 -9.94   NaN  1.2
mu[2]    10.05     NaN 0.03 10.00 10.03 10.05 10.07 10.11   NaN  1.2
sigma[1]  1.02     NaN 0.01  1.00  1.01  1.02  1.02  1.03   NaN  1.2
sigma[2]  0.98     NaN 0.02  0.94  0.96  0.97  0.99  1.01   NaN  1.2
theta     0.85     NaN 0.00  0.84  0.85  0.85  0.85  0.86   NaN  1.2
lp__      0.00     NaN 0.00  0.00  0.00  0.00  0.00  0.00   NaN  1.2

Approximate samples were drawn using VB(meanfield) at Thu Jun  4 09:31:24 2020.
We recommend genuine 'sampling' from the posterior distribution for final inferences!
[1] "vbfr"
Inference for Stan model: gauss_mix.
1 chains, each with iter=1000; warmup=0; thin=1; 
post-warmup draws per chain=1000, total post-warmup draws=1000.

          mean se_mean   sd   2.5%    25%   50%   75% 97.5% n_eff  khat
mu[1]    -9.99     NaN 0.01 -10.02 -10.00 -9.99 -9.99 -9.97   NaN 30.60
mu[2]     7.93     NaN 1.95   4.24   6.56  7.92  9.25 11.94   NaN 30.58
sigma[1]  1.01     NaN 0.01   0.98   1.00  1.01  1.01  1.03   NaN 30.61
sigma[2]  2.79     NaN 1.58   0.81   1.72  2.45  3.54  6.59   NaN 30.61
theta     0.85     NaN 0.00   0.85   0.85  0.85  0.86  0.86   NaN 30.60
lp__      0.00     NaN 0.00   0.00   0.00  0.00  0.00  0.00   NaN 30.60

Approximate samples were drawn using VB(fullrank) at Thu Jun  4 09:32:13 2020.
We recommend genuine 'sampling' from the posterior distribution for final inferences!
> 
> 
> 
> 
> 	# pdf(paste(c("out/gmm_sym_prior_", method, ".pdf"), collapse = ''))
> 
> # 	if (method=="hmc"){
> # 		params1 <- as.data.frame(extract(degenerate_fit, permuted=FALSE)[,1,])
> # 		params2 <- as.data.frame(extract(degenerate_fit, permuted=FALSE)[,2,])
> # 		params3 <- as.data.frame(extract(degenerate_fit, permuted=FALSE)[,3,])
> # 		params4 <- as.data.frame(extract(degenerate_fit, permuted=FALSE)[,4,])
> 
> # 		par(mar = c(4, 4, 0.5, 0.5))
> # 		plot(params1$"mu[1]", params1$"mu[2]", col=c_dark_highlight_trans, pch=16, cex=0.8,
> # 		     xlab="mu1", xlim=c(-3, 3), ylab="mu2", ylim=c(-3, 3))
> # 		points(params2$"mu[1]", params2$"mu[2]", col=c_dark_trans, pch=16, cex=0.8)
> # 		points(params3$"mu[1]", params3$"mu[2]", col=c_mid_highlight_trans, pch=16, cex=0.8)
> # 		points(params4$"mu[1]", params4$"mu[2]", col=c_mid_trans, pch=16, cex=0.8)
> # 		lines(0.08*(1:100) - 4, 0.08*(1:100) - 4, col="grey", lw=2)
> # 		legend("topright", c("Chain 1", "Chain 2", "Chain 3", "Chain 4"),
> # 		       fill=c(c_dark_highlight_trans, c_dark_trans,
> # 		              c_mid_highlight_trans, c_mid_trans), box.lty=0, inset=0.0005)
> # 	}
> # 	else {
> # 		params1 <- as.data.frame(extract(degenerate_fit, permuted=FALSE)[,1,])
> # 		par(mar = c(4, 4, 0.5, 0.5))
> # 		plot(params1$"mu[1]", params1$"mu[2]", col=c_dark_highlight_trans, pch=16, cex=0.8,
> # 		     xlab="mu1", xlim=c(-3, 3), ylab="mu2", ylim=c(-3, 3))
> # 		legend("topright", c("vb"),
> # 		       fill=c(c_dark_highlight_trans), box.lty=0, inset=0.0005)
> # 	}
> # 	dev.off()
> # }
> 
> 
> 
> proc.time()
   user  system elapsed 
384.754   0.445 385.263 
